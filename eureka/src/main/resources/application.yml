#slack:
#  url: https://hooks.slack.com/services/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
#  channel: spring-cloud-demo
#  user: eureka
spring:
  application:
      name: eureka-server
#security:
#  basic:
#    enabled: true
#  user:
#    name: discovery
#    password: 3GfhPZQifTpVcu
server:
  port: 8080
  undertow:
    max-http-post-size: 0
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可
    io-threads: 2
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8
    worker-threads: 16
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 1024
    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
    #   buffers-per-region: 1024 # 这个参数不需要写了
    # 是否分配的直接内存
    direct-buffers: true
eureka:
  client:
    register-with-eureka: false
    registerWithEureka: false
    fetchRegistry: true
    registry-fetch-interval-seconds: 5
    serviceUrl:
      defaultZone: http://localhost:${server.port}/eureka/
  server:
    enable-self-preservation: false
    use-read-only-response-cache: false
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10
---
#spring:
#  profiles: default1
#eureka:
#  client:
#    serviceUrl:
#      defaultZone: http://${security.user.name}:${security.user.password}@127.0.0.1:8762/eureka/
#server:
#  port: 8761
#---
#spring:
#  profiles: default2
#eureka:
#  client:
#    service-url:
#      defaultZone: http://${security.user.name}:${security.user.password}@127.0.0.1:8761/eureka/
#server:
#  port: 8762
#---
#spring:
#  profiles: eureka1
#eureka:
#  client:
#    serviceUrl:
#      defaultZone: http://${security.user.name}:${security.user.password}@eureka2:${server.port}/eureka/
#---
#spring:
#  profiles: eureka2
#eureka:
#  client:
#    service-url:
#      defaultZone: http://${security.user.name}:${security.user.password}@eureka1:${server.port}/eureka/
